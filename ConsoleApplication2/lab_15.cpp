#include <stdio.h>
#include <iostream>
#include <locale.h>




using namespace std;

//Описать функцию PowerA3(A, B), вычисляющую третью степень числа A и возвращающую ее в переменной B (A — входной, B — выходной параметр; оба параметра являются вещественными). С помощью этой функции найти третьи степени пяти данных чисел.


void PowerA3(float A, float* B) //Создаем функцию для вычисления 3 степени числа a
{
    *B = A * A * A;
}

int task_15_1()
{ // Создаем цикл для рассчета третьей степени для 5 чисел
    for (int i = 1; i <= 5; ++i) {
        float A;
        printf("A:");
        scanf_s("%f", &A);
        float B;
        PowerA3(A, &B);
        printf_s("B: %f\n", B); // Выводим результат
    }
    return 0;
}

///////////////////////////////////////////////////////////////

//Описать функцию Sign(X) целого типа, возвращающую для вещественного числа X следующие значения:
//−1, если X < 0; 0, если X = 0; 1, если X > 0.
//С помощью этой функции найти значение выражения Sign(A) + Sign(B) для данных вещественных чисел A и B.



int sign(float x) // Создаем функцию, удовлетворяющюю условиям задания
{
    if (x < 0)
        return -1;
    if (x == 0)
        return 0;
    if (x > 0)
        return 1;
}

int task_15_2(void)
{
    float a, b; // Объявляем переменные и ввод для пользователя
    printf("A:");
    scanf_s("%f", &a);
    printf("B:");
    scanf_s("%f", &b);
    printf("Sign(A)+Sign(B):%i\n", sign(a) + sign(b)); // Выводим результат
    return 0;
}

///////////////////////////////////////////////////////////////

//Описать функцию RingS(R1, R2) вещественного типа, находящую площадь кольца, заключенного между двумя окружностями с общим центром и радиусами R1 и R2 (R1 и R2 — вещественные, R1 > R2). С ее помощью найти площади трех колец, для которых даны внешние и внутренние радиусы.


float rings(float r1, float r2) { // Функция для вычисления площади кольца
    return 3.14 * (r1 * r1 - r2 * r2);
}

int task_15_3(void)
{
    int i;
    for (i = 1; i <= 3; ++i) {  // Создаем цикл для расчета площади 3 различных колец
        float r1, r2; // Объявляем переменные и реализуем ввод для пользователя
        printf("R1:");
        scanf_s("%f", &r1);
        printf("R2:");
        scanf_s("%f", &r2);
        printf("S:%f\n", rings(r1, r2)); // Выводим результат
    }
    return 0;
}


//////////////////////////////////////////////////////////////////////

//Описать функцию Quarter(x, y) целого типа, определяющую номер координатной четверти, в которой находится точка с ненулевыми вещественными координатами (x, y). С помощью этой функции найти номера координатных четвертей для трех точек с данными ненулевыми координатами


int quarter(float x, float y) { // Создаем функцию для определения номера координатной четверти
    if ((x > 0) && (y > 0))
        return 1;
    if ((x < 0) && (y > 0))
        return 2;
    if ((x < 0) && (y < 0))
        return 3;
    if ((x > 0) && (y < 0))
        return 4;
}

int task_15_4(void)
{
    int i;
    for (i = 1; i <= 3; ++i) { // Создаем цикл для определения номера координатной четверти три раза.
        float x, y;
        printf("X:");
        scanf_s("%f", &x);
        printf("Y:");
        scanf_s("%f", &y);
        printf("Quarter:%i\n", quarter(x, y));
    }
    return 0;
}


//////////////////////////////////////////////////////////////////////////////

//Описать функцию Fact2(N) вещественного типа, вычисляющую двойной факториал: 
//N!!= 1·3·5·. ..·N, если N — нечетное;
//N!!= 2·4·6·. ..·N, если N — четное(N > 0 — параметр целого типа; вещественное возвращаемое значение используется для того, чтобы избежать целочисленного переполнения при больших значениях N).



float Fact2(unsigned int n) { // Создаем функцию по заданным условиям
    int fact_double = 1;
    if (n % 2 == 0) {
        for (int i = 2; i <= n; i += 2)
            fact_double *= i;
    }

    else {
        for (int i = 1; i <= n; i += 2)
            fact_double *= i;
    }
    std::cout << fact_double;
    return 0;
}

int task_15_5() {
    int n;

    std::cin >> n;
    std::cout << Fact2(n); // Вызываем функцию и выводим результат.
    return 0;
}
